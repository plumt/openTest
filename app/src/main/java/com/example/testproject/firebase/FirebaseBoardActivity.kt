package com.example.testproject.firebase

import android.app.AlertDialog
import android.os.Bundle
import android.util.Log
import android.widget.Button
import android.widget.EditText
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import androidx.databinding.DataBindingUtil
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.testproject.R
import com.example.testproject.databinding.ActivityFirebaseBoardBinding
import com.example.testproject.recyclerview.RecyclerAdapter
import com.example.testproject.recyclerview.RecyclerAdapter_board
import com.example.testproject.recyclerview.recyclerData
import com.example.testproject.recyclerview.recyclerData_board
import com.example.testproject.retrofit.ResultEncyclopedia
import com.example.testproject.retrofit.RetrofitService
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.FirebaseUser
import com.google.firebase.auth.ktx.auth
import com.google.firebase.database.*
import com.google.firebase.ktx.Firebase
import com.google.gson.Gson
import com.google.gson.GsonBuilder
import kotlinx.android.synthetic.main.activity_naver_encyclopedia.*
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import java.lang.Exception

class FirebaseBoardActivity : AppCompatActivity() {
    private lateinit var binding: ActivityFirebaseBoardBinding
    private lateinit var auth: FirebaseAuth
    var user: FirebaseUser? = null
    var myUid: String = ""
    var start_num: Int = 15
    var reload = true
    var refresh = false
    val list = ArrayList<recyclerData_board>()
    val list_all = ArrayList<recyclerData_board>()
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = DataBindingUtil.setContentView(this, R.layout.activity_firebase_board)
        binding.activity = this
        auth = Firebase.auth
        val adapter = RecyclerAdapter_board(list)
        result_recyclerview.adapter = adapter
        login()
        binding.btn.setOnClickListener { pushBoard() }

        result_recyclerview.addOnScrollListener(object : RecyclerView.OnScrollListener() {
            override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {
                if (!result_recyclerview.canScrollVertically(1)) {
                    var layoutManager = recyclerView.layoutManager as GridLayoutManager
                    val firstPosition = layoutManager.findFirstVisibleItemPosition()
                    val lastPosition = layoutManager.findLastVisibleItemPosition()
                    start_num += 15
                    if (reload) {
                        list_print(start_num, firstPosition)
                    }
                }
            }
        })

        refresh_layout.setOnRefreshListener {
            if (refresh) {
                refresh = false
                start_num = 15
                print()
            }
            refresh_layout.isRefreshing = false
        }
    }

    fun print() {
        FirebaseDatabase.getInstance().getReference().child("board").orderByChild("sort")
            .addListenerForSingleValueEvent(object : ValueEventListener {
                override fun onDataChange(snapshot: DataSnapshot) {
                    list.clear()
                    list_all.clear()
                    reload = true
                    for (snap in snapshot.children) {
                        var boardModels: BoardModel? =
                            snap.getValue(BoardModel::class.java)

                        list_all.add(
                            recyclerData_board(
                                boardModels!!.title,
                                boardModels.date,
                                boardModels.user,
                                boardModels.board
                            )
                        )
                    }
                    list_print(start_num, 0)
                }

                override fun onCancelled(error: DatabaseError) {
                    Log.d("lys", "게시판 불러오기 실패")
                }
            })
    }

    fun list_print(c: Int, pos: Int) {
        var i = 0
        var count = c - 15
        while (i < 15) {
            if (count >= list_all.size) break
            list.add(
                recyclerData_board(
                    list_all[count].title,
                    list_all[count].date,
                    list_all[count].user,
                    list_all[count].board
                )
            )
            count++
            i++
        }
        if (count >= list_all.size) reload = false
        val adapter = RecyclerAdapter_board(list)
        result_recyclerview.adapter = adapter
        result_recyclerview.scrollToPosition(pos)
        refresh = true
        binding.invalidateAll()
    }

    fun pushBoard() {
        var boardModel = BoardModel()
        val builder = AlertDialog.Builder(this)
        val ad: AlertDialog = builder.create()
        val dialogView = layoutInflater.inflate(R.layout.custom_board_dialog, null)
        val title_edittext = dialogView.findViewById<EditText>(R.id.title_edittext)
        val board_edittext = dialogView.findViewById<EditText>(R.id.board_edittext)
        val dialogButton = dialogView.findViewById<Button>(R.id.dialog_button)

        dialogButton.setOnClickListener {
            ad.dismiss()
            if (title_edittext.text.toString().trim().length > 0 && board_edittext.text.toString()
                    .trim().length > 0
            ) {
                boardModel.title = title_edittext.text.toString()
                boardModel.board = board_edittext.text.toString()
                boardModel.sort = "0"
                boardModel.date = ServerValue.TIMESTAMP
                boardModel.user = myUid
                FirebaseDatabase.getInstance().getReference().child("board").push()
                    .setValue(boardModel)
                    .addOnCompleteListener(
                        this
                    ) { task ->
                        if (task.isSuccessful) {
                            FirebaseDatabase.getInstance().getReference().child("board")
                                .orderByChild("user/" + myUid).addListenerForSingleValueEvent(
                                    object : ValueEventListener {
                                        override fun onDataChange(snapshot: DataSnapshot) {
                                            for (snap in snapshot.children) {
                                                var key: String?
                                                var boardModels: BoardModel? =
                                                    snap.getValue(BoardModel::class.java)
                                                if (boardModels?.title.equals(boardModel.title) &&
                                                    boardModels?.board.equals(boardModel.board) &&
                                                    boardModels?.sort.equals("0")
                                                ) {
                                                    key = snap.key
                                                    val update: Map<String, Any> = mapOf(
                                                        "sort" to (9999999999999L + (-1 * (boardModels?.date).toString()
                                                            .toLong())).toString()
                                                    )
                                                    FirebaseDatabase.getInstance().getReference()
                                                        .child("board").child(key ?: "")
                                                        .updateChildren(update)
                                                        .addOnCompleteListener { task ->
                                                            if (task.isSuccessful) {
                                                                Log.d("lys", "게시글 업로드 성공")
                                                                start_num = 15
                                                                print()
                                                            } else {
                                                                Log.d("lys", "게시글 업로드 실패")
                                                            }
                                                        }
                                                }
                                            }
                                        }

                                        override fun onCancelled(error: DatabaseError) {
                                            Log.e("lys", "데이터 불러오기 실패")
                                        }
                                    })
                        } else {
                            Log.d("lys", "게시글 작성 실패")
                        }
                    }
            }
        }
        ad.setView(dialogView)
        ad.show()
    }

    fun login() {
        auth.signInAnonymously().addOnCompleteListener(this) { task ->
            if (task.isSuccessful) {
                Log.d("lys", "익명 로그인 성공")
                user = auth.currentUser
                myUid = FirebaseAuth.getInstance().currentUser!!.uid
                Log.d("lys", myUid)
                print()
            } else {
                Log.d("lys", "익명 로그인 실패")
            }
        }
    }
}