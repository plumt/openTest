package com.example.testproject.test

import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.util.Log
import androidx.databinding.DataBindingUtil
import androidx.lifecycle.ViewModelProvider
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.testproject.BR
import com.example.testproject.R
import com.example.testproject.databinding.ActivityNaverEncyclopedia2Binding
import com.example.testproject.databinding.TestListBinding
import com.example.testproject.retrofit.ResultEncyclopedia
import com.example.testproject.retrofit.RetrofitService
import com.google.gson.Gson
import com.google.gson.GsonBuilder
import kotlinx.android.synthetic.main.activity_naver_encyclopedia2.*
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

class NaverEncyclopediaActivity2 : AppCompatActivity() {


    private lateinit var binding: ActivityNaverEncyclopedia2Binding
    private lateinit var viewModel: NaverEncyclopediaActivity2ViewModel
    val client_id = "7eMxvPP_pEUFUrXWRjZI"
    val client_service = "13l0hiAuyy"
    var start_num = 1

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        viewModel = ViewModelProvider(this, ViewModelProvider.NewInstanceFactory()).get(
            NaverEncyclopediaActivity2ViewModel::class.java
        )
        binding = DataBindingUtil.setContentView(this, R.layout.activity_naver_encyclopedia2)
        rv_test.addOnScrollListener(object : RecyclerView.OnScrollListener() {
            override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {
                if (!rv_test.canScrollVertically(1)) {
                    var layoutManager = recyclerView.layoutManager as GridLayoutManager
                    val firstPosition = layoutManager.findFirstVisibleItemPosition()
                    val lastPosition = layoutManager.findLastVisibleItemPosition()
                    start_num += 10
                    print(firstPosition)
                }
            }
        })

        rv_test.apply {
            adapter = object : BaseRecyclerView.Adapter<Encyclopedia,TestListBinding>(
                R.layout.test_list,
                BR.model
            ){
                override fun onItemClick(item: Encyclopedia) {

                }
            }
        }

        binding.refreshLayout.setOnRefreshListener {
            binding.serchButton.callOnClick()
            binding.refreshLayout.isRefreshing = false
        }

        binding.serchButton.setOnClickListener {
            start_num = 1
            print(0)
        }
    }

    fun print(pos: Int) {
        var input = binding.serchEdittext.text.toString()
        var gson: Gson = GsonBuilder()
            .setLenient()
            .create()

        val builder: Retrofit.Builder = Retrofit.Builder()
            .baseUrl("https://openapi.naver.com/")
            .addConverterFactory(GsonConverterFactory.create(gson))

        val retrofit: Retrofit = builder.build()

        val client: RetrofitService = retrofit.create(RetrofitService::class.java)

        val call: Call<ResultEncyclopedia> =
            client.encyclopedia(client_id, client_service, input, start_num)

        call.enqueue(object : Callback<ResultEncyclopedia> {
            override fun onFailure(call: Call<ResultEncyclopedia>, t: Throwable) {
                Log.e("lys", "${t.message}")
            }

            override fun onResponse(
                call: Call<ResultEncyclopedia>,
                response: Response<ResultEncyclopedia>
            ) {
                Log.i("sjh", "response : "+response)
                val repos: ResultEncyclopedia? = response.body()

                Log.d("lys", "$repos")
                repos?.let {
                    lateinit var title: String
                    lateinit var link: String
                    lateinit var thumbnail: String
                    lateinit var description: String

                    it?.items?.forEach { it ->
                        title = it?.title?.replace("<b>", "")?.replace("</b>", "")
                        link = it?.link?.replace("<b>", "")?.replace("</b>", "")
                        thumbnail = it?.thumbnail?.replace("<b>", "")?.replace("</b>", "")
                        description = it?.description?.replace("<b>", "")?.replace("</b>", "")
                        viewModel.addlist(Encyclopedia(title, link, thumbnail, description))
                    }



//                    binding.resultRecyclerview.adapter = adapter
                    binding.rvTest.scrollToPosition(pos)

                }
            }
        })
    }

}