package com.example.testproject.naver

import android.content.Intent
import android.net.Uri
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.util.Log
import androidx.core.content.ContextCompat
import androidx.core.view.get
import androidx.databinding.DataBindingUtil
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.LinearSmoothScroller
import androidx.recyclerview.widget.RecyclerView
import com.example.testproject.R
import com.example.testproject.databinding.ActivityNaverEncyclopediaBinding
import com.example.testproject.dothome.DothomePrintActivity
import com.example.testproject.recyclerview.RecyclerAdapter
import com.example.testproject.recyclerview.recyclerData
import com.example.testproject.retrofit.ResultEncyclopedia
import com.example.testproject.retrofit.RetrofitService
import com.google.gson.Gson
import com.google.gson.GsonBuilder
import kotlinx.android.synthetic.main.activity_naver_encyclopedia.*
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import java.util.concurrent.TimeUnit

class NaverEncyclopediaActivity : AppCompatActivity() {
    val client_id = "7eMxvPP_pEUFUrXWRjZI"
    val client_service = "13l0hiAuyy"
    private lateinit var binding: ActivityNaverEncyclopediaBinding
    var tag = "lys"
    var start_num = 1
    val list = ArrayList<recyclerData>()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = DataBindingUtil.setContentView(this, R.layout.activity_naver_encyclopedia)
        binding.activity = this
        val adapter = RecyclerAdapter(list)
        result_recyclerview.adapter = adapter



        result_recyclerview.addOnScrollListener(object : RecyclerView.OnScrollListener() {
            override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {
                if (!result_recyclerview.canScrollVertically(1)) {
                    var layoutManager = recyclerView.layoutManager as GridLayoutManager
                    val firstPosition = layoutManager.findFirstVisibleItemPosition()
                    val lastPosition = layoutManager.findLastVisibleItemPosition()
                    start_num += 10
                    print(firstPosition)
                }
            }
        })


        refresh_layout.setOnRefreshListener {
            binding.serchButton.callOnClick()
            refresh_layout.isRefreshing = false
        }
        binding.serchButton.setOnClickListener {
            start_num = 1
            list.clear()
            print(0)
        }
    }

    fun print(pos: Int) {
        var input = binding.serchEdittext.text.toString()
        var gson: Gson = GsonBuilder()
            .setLenient()
            .create()

        val builder: Retrofit.Builder = Retrofit.Builder()
            .baseUrl("https://openapi.naver.com/")
            .addConverterFactory(GsonConverterFactory.create(gson))

        val retrofit: Retrofit = builder.build()

        val client: RetrofitService = retrofit.create(RetrofitService::class.java)

        val call: Call<ResultEncyclopedia> =
            client.encyclopedia(client_id, client_service, input, start_num)

        call.enqueue(object : Callback<ResultEncyclopedia> {
            override fun onFailure(call: Call<ResultEncyclopedia>, t: Throwable) {
                Log.e(tag, "${t.message}")
            }

            override fun onResponse(
                call: Call<ResultEncyclopedia>,
                response: Response<ResultEncyclopedia>
            ) {
                val repos: ResultEncyclopedia? = response.body()
                Log.d(tag, "$repos")
                repos?.let {
//                    var start: String? = it?.start
//                    var total: String? = it?.total
//                    var display: String? = it?.display
                    it?.items?.forEach { it ->
                        var title = it?.title?.replace("<b>", "")?.replace("</b>", "")
                        var link = it?.link?.replace("<b>", "")?.replace("</b>", "")
                        var thumbnail = it?.thumbnail?.replace("<b>", "")?.replace("</b>", "")
                        var description = it?.description?.replace("<b>", "")?.replace("</b>", "")
                        list.add(recyclerData(title, link, thumbnail, description))
                    }
                    val adapter = RecyclerAdapter(list)
                    result_recyclerview.adapter = adapter
                    result_recyclerview.scrollToPosition(pos)
                }
                binding.invalidateAll()
            }
        })
    }
}