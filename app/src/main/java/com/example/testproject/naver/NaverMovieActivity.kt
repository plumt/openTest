package com.example.testproject.naver

import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.util.Log
import androidx.databinding.DataBindingUtil
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.testproject.R
import com.example.testproject.databinding.ActivityNaverMovieBinding
import com.example.testproject.recyclerview.RecyclerAdapter_movie
import com.example.testproject.recyclerview.recyclerData
import com.example.testproject.recyclerview.recyclerData_movie
import com.example.testproject.retrofit.ResultMovie
import com.example.testproject.retrofit.RetrofitService
import com.google.gson.Gson
import com.google.gson.GsonBuilder
import kotlinx.android.synthetic.main.activity_naver_encyclopedia.*
import kotlinx.android.synthetic.main.activity_naver_movie.*
import kotlinx.android.synthetic.main.activity_naver_movie.result_recyclerview
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

class NaverMovieActivity : AppCompatActivity() {
    val client_id = "7eMxvPP_pEUFUrXWRjZI"
    val client_service = "13l0hiAuyy"
    private lateinit var binding: ActivityNaverMovieBinding
    val list = ArrayList<recyclerData_movie>()
    var start_num = 1
    var tag = "lys"
    var refresh = false
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = DataBindingUtil.setContentView(this, R.layout.activity_naver_movie)
        binding.activity = this
        val adapter = RecyclerAdapter_movie(list)
        result_recyclerview.adapter = adapter

        result_recyclerview.addOnScrollListener(object : RecyclerView.OnScrollListener() {
            override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {
                if (!result_recyclerview.canScrollVertically(1)) {
                    var layoutManager = recyclerView.layoutManager as GridLayoutManager
                    val firstPosition = layoutManager.findFirstVisibleItemPosition()
                    val lastPosition = layoutManager.findLastVisibleItemPosition()
                    if (list.size % 10 == 0 && refresh) {
                        start_num += 10
                        print(firstPosition)
                    }
                }
            }
        })

        refresh_layout_movie.setOnRefreshListener {
            binding.serchButton.callOnClick()
            refresh_layout_movie.isRefreshing = false
        }

        binding.serchButton.setOnClickListener {
            start_num = 1
            list.clear()
            print(0)
        }
    }

    fun print(pos: Int) {
        var input = binding.serchEdittext.text.toString()

        var gson: Gson = GsonBuilder()
            .setLenient()
            .create()

        val builder: Retrofit.Builder = Retrofit.Builder()
            .baseUrl("https://openapi.naver.com/")
            .addConverterFactory(GsonConverterFactory.create(gson))

        val retrofit: Retrofit = builder.build()

        val client: RetrofitService = retrofit.create(RetrofitService::class.java)

        val call: Call<ResultMovie> = client.movie(client_id, client_service, input, start_num)

        call.enqueue(object : Callback<ResultMovie> {
            override fun onFailure(call: Call<ResultMovie>, t: Throwable) {
                Log.e(tag, "${t.message}")
            }

            override fun onResponse(call: Call<ResultMovie>, response: Response<ResultMovie>) {
                val repos: ResultMovie? = response.body()
                Log.d(tag, repos.toString())
                repos?.let {
                    it?.items?.forEach { it ->
                        var title = it?.title?.replace("<b>", "").replace("</b>", "")
                        var link = it?.link?.replace("<b>", "").replace("</b>", "")
                        var image = it?.image?.replace("<b>", "").replace("</b>", "")
                        var pubDate = it?.pubDate?.replace("<b>", "").replace("</b>", "")
                        var director =
                            it?.director?.replace("<b>", "").replace("</b>", "").replace("|", ",")
                        if (director.length > 0) director =
                            director.substring(0, director.length - 1)
                        var actor =
                            it?.actor?.replace("<b>", "").replace("</b>", "").replace("|", ",")
                        if (actor.length > 0) actor = actor.substring(0, actor.length - 1)
                        var userRating =
                            "â˜… " + it?.userRating?.replace("<b>", "").replace("</b>", "")
                        if (list.size > 10 && list[list.size - 10].link.equals(link)) {
                            refresh = false
                            return
                        } else{
                            refresh = true
                        }
                        list.add(
                            recyclerData_movie(
                                title,
                                link,
                                image,
                                pubDate,
                                director,
                                actor,
                                userRating
                            )
                        )
                    }
                    Log.d(tag, "list size -> " + list.size.toString())
                    val adapter = RecyclerAdapter_movie(list)
                    result_recyclerview.adapter = adapter
                    result_recyclerview.scrollToPosition(pos)
                }
                binding.invalidateAll()
            }
        })
    }
}