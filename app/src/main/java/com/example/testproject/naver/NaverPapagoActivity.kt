package com.example.testproject.naver

import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.util.Log
import androidx.databinding.DataBindingUtil
import com.example.testproject.R
import com.example.testproject.retrofit.ResultTransferPapago
import com.example.testproject.retrofit.RetrofitService
import com.example.testproject.databinding.ActivityNaverPapagoBinding
import com.google.gson.Gson
import com.google.gson.GsonBuilder
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

class NaverPapagoActivity : AppCompatActivity() {

    private lateinit var binding: ActivityNaverPapagoBinding
    val tag: String = "lys"
    var txt = ""
    val client_id = "1xEmfrzp6LXgFRox_yAI"
    val client_service = "wd8tODeJVm"

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = DataBindingUtil.setContentView(this, R.layout.activity_naver_papago)
        binding.activity = this

        binding.translateButton.setOnClickListener {
            var input_txt: String = binding.inputEditview.text.toString()

            var gson: Gson = GsonBuilder()
                .setLenient()
                .create()

            val builder: Retrofit.Builder = Retrofit.Builder()
                .baseUrl("https://openapi.naver.com/")
                .addConverterFactory(GsonConverterFactory.create(gson))

            val retrofit: Retrofit = builder.build()

            val client: RetrofitService = retrofit.create(RetrofitService::class.java)

            val call: Call<ResultTransferPapago> =
                client.papago(client_id, client_service, "ko", "en", input_txt)

            call.enqueue(object : Callback<ResultTransferPapago> {
                override fun onFailure(call: Call<ResultTransferPapago>, t: Throwable) {
                    Log.e(tag, "${t.message}")
                }

                override fun onResponse(
                    call: Call<ResultTransferPapago>,
                    response: Response<ResultTransferPapago>
                ) {
                    val repos: ResultTransferPapago? = response.body()
                    repos?.let {
                        val translatedText = it.message.result.translatedText
                        val srcLangType = it.message.result.srcLangType
                        val tarLangType = it.message.result.tarLangType
                        txt = translatedText
                        binding.invalidateAll()
                    }
                }
            })
        }
    }
}