package com.example.testproject.openapi

import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.util.Log
import androidx.databinding.DataBindingUtil
import com.example.testproject.R
import com.example.testproject.databinding.ActivityDothomeLoginBinding
import com.example.testproject.databinding.ActivityNaverPapagoBinding
import com.example.testproject.databinding.ActivityOpenApiRoadBinding
import com.example.testproject.recyclerview.RecyclerAdapter
import com.example.testproject.recyclerview.RecyclerAdapter_road
import com.example.testproject.recyclerview.recyclerData
import com.example.testproject.recyclerview.recyclerData_road
import com.example.testproject.retrofit.*
import com.google.gson.Gson
import com.google.gson.GsonBuilder
import kotlinx.android.synthetic.main.activity_naver_encyclopedia.*
import okhttp3.OkHttpClient
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import retrofit2.converter.scalars.ScalarsConverterFactory
import java.net.URLDecoder
import java.net.URLEncoder

class OpenApiRoadActivity : AppCompatActivity() {

    private lateinit var binding: ActivityOpenApiRoadBinding
    var txt: String = ""
    var tag = "lys"
    var adress = ""
    var sel = "road"
    var key =
        "nHxMfmtyTjtuCvjAcPez7bDwl%2BPwLECo%2FF2%2FLp92vVDqrtlW4KTvdmMMqZiXWu5zyrP6ehOEnYoeG6hpdbSA8w%3D%3D"
    val list = ArrayList<recyclerData_road>()
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = DataBindingUtil.setContentView(this, R.layout.activity_open_api_road)
        binding.activity = this
        binding.serchButton.setOnClickListener {
            list.clear()
            adress = binding.adressEdittext.text.toString()

            val builder: Retrofit.Builder = Retrofit.Builder()
                .baseUrl("http://openapi.epost.go.kr/")
                .addConverterFactory(ScalarsConverterFactory.create())

            val retrofit: Retrofit = builder.build()

            val client: RetrofitService = retrofit.create(RetrofitService::class.java)

            val call: Call<String> = client.road(URLDecoder.decode(key, "UTF-8"), sel, adress)

            call.enqueue(object : Callback<String> {

                override fun onFailure(call: Call<String>, t: Throwable) {
                    Log.e(tag, "${t.message}")
                }

                override fun onResponse(
                    call: Call<String>,
                    response: Response<String>
                ) {
                    val repos: String? = response.body()
                    Log.d(tag, "$repos")
                    printAdress(repos)
                }
            })
        }
    }

    fun printAdress(repos: String?) {
        var zipNo_count = 0
        var lnm_count = 0
        var rn_count = 0
        while (true) {
            var startIndex_zipNo: Int = repos?.indexOf("<zipNo>", zipNo_count)?.plus(7) ?: -1
            var endIndex_zipNo: Int = repos?.indexOf("</zipNo>", zipNo_count) ?: -1
            var zipNo = ""
            zipNo_count = endIndex_zipNo + 7


            var startIndex_lnm: Int = repos?.indexOf("<lnmAdres>", lnm_count)?.plus(10) ?: -1
            var endIndex_lnm: Int = repos?.indexOf("</lnmAdres>", lnm_count) ?: -1
            var lnmAdres = ""
            lnm_count = endIndex_lnm + 10


            var startIndex_rn: Int = repos?.indexOf("<rnAdres>", rn_count)?.plus(9) ?: -1
            var endIndex_rn: Int = repos?.indexOf("</rnAdres>", rn_count) ?: -1
            var rnAdres = ""
            rn_count = endIndex_rn + 9

            if (endIndex_zipNo != -1) {
                zipNo = repos?.substring(startIndex_zipNo, endIndex_zipNo) ?: ""
                lnmAdres = repos?.substring(startIndex_lnm, endIndex_lnm) ?: ""
                rnAdres = repos?.substring(startIndex_rn, endIndex_rn) ?: ""
                list.add(recyclerData_road(zipNo, lnmAdres, rnAdres))
            } else {
                break
            }
        }
        val adapter = RecyclerAdapter_road(list)
        result_recyclerview.adapter = adapter
        binding.invalidateAll()
    }

}