package com.example.testproject.openapi

import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.View.INVISIBLE
import android.view.View.VISIBLE
import android.view.ViewGroup
import android.widget.Button
import android.widget.EditText
import androidx.core.view.isGone
import androidx.core.view.isInvisible
import androidx.core.view.isVisible
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.FragmentTransaction
import com.example.testproject.R
import com.example.testproject.databinding.FragmentPageBinding
import com.example.testproject.recyclerview.RecyclerAdapter_road
import com.example.testproject.recyclerview.recyclerData_road
import com.example.testproject.retrofit.RetrofitService
import kotlinx.android.synthetic.main.activity_naver_encyclopedia.*
import kotlinx.android.synthetic.main.activity_naver_encyclopedia.result_recyclerview
import kotlinx.android.synthetic.main.fragment_page.*
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import retrofit2.Retrofit
import retrofit2.converter.scalars.ScalarsConverterFactory
import java.net.URLDecoder


class FirstPageFragment : BaseFragment() {

    var adress = ""
    var sel = "road"
    var key =
        "nHxMfmtyTjtuCvjAcPez7bDwl%2BPwLECo%2FF2%2FLp92vVDqrtlW4KTvdmMMqZiXWu5zyrP6ehOEnYoeG6hpdbSA8w%3D%3D"
    val list = ArrayList<recyclerData_road>()
    private lateinit var binding: FragmentPageBinding
    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_page, container, false)
        val root: View = binding.root
        val textWatcher = object : TextWatcher{
            override fun afterTextChanged(s: Editable?) {
                if(s.toString().trim().length > 0){
                    binding.deleteTextview.visibility = VISIBLE
                } else{
                    binding.deleteTextview.visibility = INVISIBLE
                }

            }

            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {

            }

            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {

            }
        }
        binding.adressEdittext.addTextChangedListener(textWatcher)

        binding.deleteTextview.setOnClickListener{
            binding.adressEdittext.setText("")
        }

        binding.serchButton.setOnClickListener {
            list.clear()
            adress = binding.adressEdittext.text.toString()

            val builder: Retrofit.Builder = Retrofit.Builder()
                .baseUrl("http://openapi.epost.go.kr/")
                .addConverterFactory(ScalarsConverterFactory.create())

            val retrofit: Retrofit = builder.build()

            val client: RetrofitService = retrofit.create(RetrofitService::class.java)

            val call: Call<String> = client.road(URLDecoder.decode(key, "UTF-8"), sel, adress)

            call.enqueue(object : Callback<String> {

                override fun onFailure(call: Call<String>, t: Throwable) {
                    Log.e(tag, "${t.message}")
                }

                override fun onResponse(
                    call: Call<String>,
                    response: Response<String>
                ) {
                    val repos: String? = response.body()
                    Log.d(tag, "$repos")
                    printAdress(repos)
                }
            })
        }
        return root
    }

    fun printAdress(repos: String?) {
        var zipNo_count = 0
        var lnm_count = 0
        var rn_count = 0
        while (true) {
            var startIndex_zipNo: Int = repos?.indexOf("<zipNo>", zipNo_count)?.plus(7) ?: -1
            var endIndex_zipNo: Int = repos?.indexOf("</zipNo>", zipNo_count) ?: -1
            var zipNo = ""
            zipNo_count = endIndex_zipNo + 7


            var startIndex_lnm: Int = repos?.indexOf("<lnmAdres>", lnm_count)?.plus(10) ?: -1
            var endIndex_lnm: Int = repos?.indexOf("</lnmAdres>", lnm_count) ?: -1
            var lnmAdres = ""
            lnm_count = endIndex_lnm + 10


            var startIndex_rn: Int = repos?.indexOf("<rnAdres>", rn_count)?.plus(9) ?: -1
            var endIndex_rn: Int = repos?.indexOf("</rnAdres>", rn_count) ?: -1
            var rnAdres = ""
            rn_count = endIndex_rn + 9

            if (endIndex_zipNo != -1) {
                zipNo = repos?.substring(startIndex_zipNo, endIndex_zipNo) ?: ""
                lnmAdres = repos?.substring(startIndex_lnm, endIndex_lnm) ?: ""
                rnAdres = repos?.substring(startIndex_rn, endIndex_rn) ?: ""
                list.add(recyclerData_road(zipNo, lnmAdres, rnAdres))
            } else {
                break
            }
        }
        val adapter = RecyclerAdapter_road(list)
        result_recyclerview.adapter = adapter
    }

    override fun title(): String {
        return "도로명"
    }
}